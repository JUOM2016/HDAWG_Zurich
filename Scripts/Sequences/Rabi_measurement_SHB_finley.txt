{{

    //// (1) Common Parameter Definition
    // Clock Parameters

    const sampling_rate = {sampling_rate}; //Hz; Sampling rate, should be the same as what you set on the right panel!

    const Number_of_burning_pulses = {Number_of_burning_pulses}; // Number of burning pulses
    const Number_of_burning_back_pulses = {Number_of_burning_back_pulses}; // Number of burning back pulses

    // Burning Pulse Parameters
    const centre_freq_burning = {centre_freq_burning}; //Hz; Central freq set to drive AOM for burning
    const chirpAmplitude_burning = {chirpAmplitude_burning}; // V; amplitude of burning pulse 
    const freq_sweeping_burning={freq_sweeping_burning};//Hz; set the scanning frequency range of burning pulse (the actual scanning range should be 4*freq_detuning)
    const burning_duration={burning_duration}; //s; burning time 
    const startFreq_burning = (centre_freq_burning-freq_sweeping_burning)/sampling_rate;//Hz; starting frequency of the burning pulse 
    const stopFreq_burning = (centre_freq_burning+freq_sweeping_burning)/sampling_rate;//Hz; ending frequency of the burning pulse 
    const chirpSamples_burning = round(burning_duration*sampling_rate/16)*16;// Calculating sampling points 
    const phase = 0;

    // Burning-back pulse parameters
    const centre_freq_burning_back={centre_freq_burning_back}; //Hz; Central frequency set to drive the AOM for burn-back
    const chirpAmplitude_burning_back = {chirpAmplitude_burning_back};// V; amplitude of burn-back
    const freq_sweeping_burning_back={freq_sweeping_burning_back};//Hz; set the scanning frequency range of burn-back (the actual scanning range should be 4*freq_detuning)
    const burning_duration_burning_back={burning_duration_burning_back}; //s; burning time burn-back
    const startFreq_burning_back = (centre_freq_burning_back-freq_sweeping_burning_back)/sampling_rate;//Hz; starting frequency of the burn-back
    const stopFreq_burning_back = (centre_freq_burning_back+freq_sweeping_burning_back)/sampling_rate;//Hz; ending frequency of the burn-back
    const chirpSamples_burning_back = round(burning_duration_burning_back*sampling_rate/16)*16;// Calculating sampling points 

    // Rabi Pulse Parameters
    const centre_freq_rabi = {centre_freq_rabi}; //Hz; Central freq set to dive AOM for Rabi measurment pulse
    const rabi_duration = {rabi_duration}; //s; Pulse duration of rabi measurment pulse
    const amplitude_rabi_max = {amplitude_rabi_max}; //V; amplitude of rabi measurement pusle
    const amplitude_rabi_min = {amplitude_rabi_min}; //V; amplitude of rabi measurement pusle
    const nrOfPeriods_rabi = rabi_duration*centre_freq_rabi; // Number of periods of sine inside rabi pulse
    const samples_rabi = round(rabi_duration*sampling_rate/16)*16; // Calculating sampling points 
    
    // Shuffle Pulse parameters
    const centre_freq_shuffle = {centre_freq_shuffle}; //Hz; Central frequency of the shuffle pulse
    const chirpAmplitude_shuffle = {chirpAmplitude_shuffle}; // V; amplitude of shuffling pulse
    const freq_sweeping_shuffle={freq_sweeping_shuffle}; //Hz; set the scanning frequency range of shuffling pulse
    const shuffle_duration={shuffle_duration}; //s; shufling time
    const startFreq_shuffle = (centre_freq_shuffle-freq_sweeping_shuffle)/sampling_rate; //Hz; starting frequency of the shuffling pulse
    const stopFreq_shuffle = (centre_freq_shuffle+freq_sweeping_shuffle)/sampling_rate; //Hz; ending frequency of the shuffling pulse
    const chirpSamples_shuffle =round(shuffle_duration*sampling_rate/16)*16; // Calculating sampling points

    //// Waveform Definitions
    wave chirpedSine_burning = chirpAmplitude_burning*chirp(chirpSamples_burning,1,startFreq_burning,stopFreq_burning,phase); //burning pulse with marker appended
    wave chirpedSine_burning_1 = chirpAmplitude_burning*chirp(chirpSamples_burning,1,startFreq_burning,stopFreq_burning, phase); //burning pulse without marker appended
    wave chirpedSine_burning_back = chirpAmplitude_burning_back*chirp(chirpSamples_burning_back,1,startFreq_burning_back,stopFreq_burning_back, phase); //burnback pulse 
    //wave Sine_rabi = amplitude_rabi*sine(samples_rabi,1,phase,nrOfPeriods_rabi)
    wave chirpedSine_shuffle = chirpAmplitude_shuffle*chirp(chirpSamples_shuffle,1,startFreq_shuffle,stopFreq_shuffle, phase); //shuffle pulse

    //// Pulse Sequence

    const length = 15; // Number of amplitude steps
    const amp_step = (amplitude_rabi_max - amplitude_rabi_min) / length;

    cvar k;

    // Write to command table

    for(k = 0; k < length; k = k + 1) {{
        wave Sine_rabi = sine(samples_rabi,(amplitude_rabi_min+(k+1)*amp_step),phase,nrOfPeriods_rabi);
        assignWaveIndex(1,Sine_rabi,k);
    }}

    var j=0;
    var i;

const average={average};
const amp_num={amp_num};

cvar l;

for(l=0;l<average;l=l+1){{

    for(j=0;j<amp_num;j++){{

        const delay_00 = 0.3E-3; //s; time delay between repeated burning pulses
        const sample_delay_00=round(delay_00*sampling_rate/16)*16;

        // Play Burning Pulses

        playWave(chirpedSine_burning);
        playZero(sample_delay_00);

        for (i = 0; i < Number_of_burning_pulses; i++) {{
            playWave(chirpedSine_burning_1);
            playZero(sample_delay_00);
        }}

        // Wait Between Burn and Burn-back Pulses

        const delay_01=0.3E-3; //s; time delay between the burning pulses and burn-back
        const sample_delay_01=round(delay_01*sampling_rate/16)*16;
        playZero(sample_delay_01);

        // Play Burning-back Pulses

        const delay_02 = 0.3E-3; //s; time delay between repeated burn-back pulses
        const sample_delay_02=round(delay_02*sampling_rate/16)*16;

        for (i = 0; i < Number_of_burning_back_pulses; i++) {{
            playWave(chirpedSine_burning_back);
            playZero(sample_delay_02);
        }}

        const delay_05=1E-3; //s; time delay between the clean and read-out pulses (also, between burn and read-out when testing with no burn-back and clean)
        const sample_delay_05=round(delay_05*sampling_rate/16)*16;
        playZero(sample_delay_05);

        const delay_06=10E-6;//s; time delay between rabi pulse and shuffle pulse
        const sample_delay_06=round(delay_06*sampling_rate/16)*16;
        
        waitWave();
        setTrigger(1);
        executeTableEntry(j);
        waitWave();
        setTrigger(0);
        playZero(sample_delay_06);

        // Play Shuffle Pulse

        const delay_07=10E-3;//s; time delay between the shuffle pulse and burning pulse
        const sample_delay_07=round(delay_07*sampling_rate/16)*16;

        playZero(sample_delay_07);
        playWave(chirpedSine_shuffle);
        playZero(sample_delay_07);


    }}

}}

}}